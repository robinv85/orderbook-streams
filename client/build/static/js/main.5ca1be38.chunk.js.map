{"version":3,"sources":["util/fileReader.js","components/Market.js","components/MarketsList.js","App.js","serviceWorker.js","index.js"],"names":["parseBlob","blob","Promise","resolve","reader","FileReader","onload","console","log","result","JSON","parse","readAsText","Market","className","MarketsList","props","browseAvailableMarkets","markets","online","map","market","key","exchange","pair","onClick","STATUS","ws","WebSocket","Modal","setAppElement","App","useState","status","setStatus","React","modalIsOpen","setIsOpen","exchanges","setExchanges","subscriptions","setSubscriptions","closeModal","availableMarkets","reduce","exchangeId","id","exchangeName","name","pairs","filter","hasOwnProperty","useEffect","onopen","onmessage","evt","a","data","Blob","error","onclose","onerror","Object","values","isOpen","onRequestClose","contentLabel","keys","length","entries","marketId","subscription","asks","bids","midPrice","spread","send","stringify","action","onAddSubscription","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.5ca1be38.chunk.js","sourcesContent":["export function parseBlob(blob) {\n  return new Promise(resolve => {\n    const reader = new FileReader();\n    reader.onload = () => {\n      console.log(\"reader res:\", reader.result);\n      resolve(JSON.parse(reader.result));\n    };\n    reader.readAsText(blob);\n  });\n}\n","import React from \"react\";\n\nexport default function Market() {\n  return (\n    <div className=\"Market\">\n      <header className=\"Market-header\">\n        <h3>Kraken BTC/USD</h3>\n        <p>Speed: 53 ob/min</p>\n      </header>\n      <ul className=\"AsksList\">\n        <li className=\"Ask\">\n          <span className=\"AskPrice\">7107.3</span>\n          <span className=\"\">25.0</span>\n        </li>\n        <li className=\"Ask\">\n          <span className=\"AskPrice\">7107.3</span>\n          <span className=\"\">25.0</span>\n        </li>\n        <li className=\"Ask\">\n          <span className=\"AskPrice\">7107.3</span>\n          <span className=\"\">25.0</span>\n        </li>\n      </ul>\n      <div className=\"Market-highlight\">\n        <div className=\"MidPrice\">7142.5 USD</div>\n        <div className=\"Spread\">0.03%</div>\n      </div>\n      <ul className=\"BidsList\">\n        <li className=\"Bid\">\n          <span className=\"BidPrice\">7104.8</span>\n          <span className=\"\">22.1</span>\n        </li>\n        <li className=\"Bid\">\n          <span className=\"BidPrice\">7104.8</span>\n          <span className=\"\">22.1</span>\n        </li>\n        <li className=\"Bid\">\n          <span className=\"BidPrice\">7104.8</span>\n          <span className=\"\">22.1</span>\n        </li>\n      </ul>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport Market from \"./Market\";\n\nexport default function MarketsList(props) {\n  const { browseAvailableMarkets, markets, online } = props;\n  // const [markets, setMarkets] = useState([]);\n  console.log(\"subscriptions:\", {\n    markets\n  });\n  return (\n    <ul className=\"MarketsList\">\n      {markets.map(market => (\n        <Market key={`${market.exchange}.${market.pair}`} {...market} />\n      ))}\n      {online ? (\n        <li className=\"NewMarketPlaceholder\" onClick={browseAvailableMarkets}>\n          <span className=\"AddMarketButton\"> &#43; </span>\n          <p>Click to add a new market</p>\n        </li>\n      ) : (\n        <p>Connecting to server...</p>\n      )}\n    </ul>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport Modal from \"react-modal\";\nimport { parseBlob } from \"./util/fileReader\";\nimport MarketsList from \"./components/MarketsList\";\nimport \"./App.css\";\n\nconst STATUS = {\n  INITIALIZING: \"INITIALIZING\",\n  CONNECTED: \"CONNECTED\",\n  RECONNECTING: \"RECONNECTING\"\n};\nconst WS_URL = \"ws://localhost:9000\";\n\nconst ws = new WebSocket(WS_URL);\nModal.setAppElement(\"#root\");\n\n// if (!ws || ws.readyState == WebSocket.CLOSED) this.connect();\n\nfunction App() {\n  const [status, setStatus] = useState(STATUS.INITIALIZING);\n  const [modalIsOpen, setIsOpen] = React.useState(false);\n  const [exchanges, setExchanges] = useState([]);\n  const [subscriptions, setSubscriptions] = useState({});\n\n  const closeModal = () => setIsOpen(false);\n  const openModal = () => setIsOpen(true);\n  const onAddSubscription = (marketId, market) => {\n    const { exchangeId, pair } = market;\n    console.log(\"onAddMarket\", { exchangeId, pair });\n    const subscription = {\n      ...market,\n      asks: [],\n      bids: [],\n      midPrice: null,\n      spread: null\n    };\n    setSubscriptions({ ...subscriptions, [marketId]: subscription });\n    closeModal();\n    ws.send(\n      JSON.stringify({\n        action: \"subscribe\",\n        exchangeId,\n        pair\n      })\n    );\n  };\n\n  const availableMarkets = exchanges.reduce((markets, exchange) => {\n    const { id: exchangeId, name: exchangeName, pairs } = exchange;\n    return {\n      ...markets,\n      ...pairs\n        .filter(pair => !subscriptions.hasOwnProperty(`${exchangeId}.${pair}`))\n        .map(pair => ({\n          id: `{exchangeId}.${pair}`,\n          exchangeId,\n          exchangeName,\n          pair\n        }))\n        .reduce(\n          (pairs, market) => ({\n            ...pairs,\n            [market.id]: market\n          }),\n          {}\n        )\n    };\n  }, {});\n\n  console.log({ availableMarkets });\n  useEffect(() => {\n    ws.onopen = () => {\n      setStatus(STATUS.CONNECTED);\n    };\n    ws.onmessage = async evt => {\n      let data;\n      try {\n        if (evt.data instanceof Blob) {\n          data = await parseBlob(evt.data);\n        } else {\n          data = JSON.parse(evt.data);\n        }\n      } catch (err) {\n        console.error(\"failed parsing message: \", evt.data);\n      }\n      console.log(\"message:\", data);\n      if (data?.exchanges) {\n        setExchanges(data.exchanges);\n      }\n      if (data?.pair) {\n      }\n    };\n    ws.onclose = () => {\n      setStatus(STATUS.RECONNECTING);\n      console.log(\"ws closed\");\n    };\n    ws.onerror = () => console.log(\"ws error\");\n  }, [ws]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"StatusBar\">\n        Status:\n        <span\n          className={`status ${\n            status === STATUS.RECONNECTING ? \"status-error\" : \"status-ok\"\n          }`}\n        >\n          {status}\n        </span>\n      </div>\n      <header className=\"App-header\">\n        <h1>Orderbooks</h1>\n      </header>\n      {status === STATUS.INITIALIZING ? (\n        <p>Connecting to server...</p>\n      ) : (\n        <MarketsList\n          exchanges={exchanges}\n          online={status === STATUS.CONNECTED}\n          markets={Object.values(subscriptions)}\n          browseAvailableMarkets={openModal}\n        />\n      )}\n      <Modal\n        className=\"AddMarketModal\"\n        isOpen={modalIsOpen}\n        onRequestClose={closeModal}\n        contentLabel=\"Add market\"\n      >\n        <h2>Add market</h2>\n        <p>\n          Select which market you want to track (available:{\" \"}\n          {Object.keys(availableMarkets).length})\n        </p>\n        <ul className=\"AddMarketsList\">\n          {Object.entries(availableMarkets).map(([marketId, market]) => {\n            const { exchangeName, pair } = market;\n            //console.log({ marketId, market });\n            return (\n              <li\n                className=\"AddMarketsListItem\"\n                key={marketId}\n                onClick={() => onAddSubscription(marketId, market)}\n              >\n                &#43; {exchangeName}: {pair}\n              </li>\n            );\n          })}\n        </ul>\n        <div>\n          <button className=\"button-cancel\" onClick={closeModal}>\n            Cancel\n          </button>\n        </div>\n      </Modal>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}