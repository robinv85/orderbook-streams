{"version":3,"sources":["util/fileReader.js","components/Market.js","util/orderBook.js","components/MarketsList.js","App.js","serviceWorker.js","index.js"],"names":["parseBlob","blob","Promise","resolve","reader","FileReader","onload","JSON","parse","result","readAsText","Market","props","asks","bids","exchangeName","pair","speed","onRemove","length","bestAskPrice","bestBidPrice","midPrice","toFixed","spread","calculateStats","className","reverse","map","ask","i","key","bid","onClick","MarketsList","browseAvailableMarkets","markets","online","removeMarket","market","id","STATUS","ws","WebSocket","Modal","setAppElement","App","useState","status","setStatus","React","modalIsOpen","setIsOpen","exchanges","setExchanges","subscriptions","setSubscriptions","closeModal","availableMarkets","reduce","exchange","exchangeId","name","pairs","filter","hasOwnProperty","useEffect","onopen","onmessage","evt","a","data","Blob","console","error","subscriptionId","subscription","updatedSubscription","undefined","onclose","onerror","Object","values","marketId","marketToRemove","updatedSubscriptions","send","stringify","action","isOpen","onRequestClose","contentLabel","keys","entries","onAddSubscription","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.436c1e26.chunk.js","sourcesContent":["export function parseBlob(blob) {\n  return new Promise(resolve => {\n    const reader = new FileReader();\n    reader.onload = () => {\n      resolve(JSON.parse(reader.result));\n    };\n    reader.readAsText(blob);\n  });\n}\n","import React from \"react\";\n\nimport { calculateStats } from \"../util/orderBook\";\n\nexport default function Market(props) {\n  const { asks = [], bids = [], exchangeName, pair, speed, onRemove } = props;\n  const { midPrice = \"\", spread = \"\" } = calculateStats(asks, bids);\n  return (\n    <li className=\"Market\">\n      <header className=\"Market-header\">\n        <h3>\n          {exchangeName} {pair}\n        </h3>\n        <p>Speed: {speed && `${speed} updates/minute`}</p>\n      </header>\n      <ul className=\"AsksList\">\n        {asks.reverse().map((ask, i) => {\n          return (\n            <li key={`${i}${ask[0]}`} className=\"Ask\">\n              <span className=\"AskPrice\">{ask[0]}</span>\n              <span className=\"\">{ask[1]}</span>\n            </li>\n          );\n        })}\n      </ul>\n      <div className=\"Market-highlight\">\n        <div className=\"MidPrice\">{midPrice && `${midPrice} USD`}</div>\n        <div className=\"Spread\">{spread && `${spread} %`}</div>\n      </div>\n      <ul className=\"BidsList\">\n        {bids.map((bid, i) => {\n          return (\n            <li key={`${i}${bid[0]}`} className=\"Bid\">\n              <span className=\"BidPrice\">{bid[0]}</span>\n              <span className=\"\">{bid[1]}</span>\n            </li>\n          );\n        })}\n      </ul>\n      <p className=\"RemoveMarket\" onClick={onRemove}>\n        <span className=\"RemoveMarketButton\"> &#10006; </span>\n        <span className=\"RemoveMarketText\">Click to remove market</span>\n      </p>\n    </li>\n  );\n}\n","const DECIMAL_NUMBER = 7;\n\nexport const calculateStats = (asks, bids) => {\n  if (!asks.length || !bids.length) return {};\n  const bestAskPrice = asks[0][0];\n  const bestBidPrice = bids[0][0];\n  const midPrice = ((bestAskPrice + bestBidPrice) / 2).toFixed(DECIMAL_NUMBER);\n  const spread = ((bestAskPrice - bestBidPrice) / midPrice).toFixed(\n    DECIMAL_NUMBER\n  );\n  return { midPrice, spread };\n};\n","import React from \"react\";\nimport Market from \"./Market\";\n\nexport default function MarketsList(props) {\n  const { browseAvailableMarkets, markets, online, removeMarket } = props;\n  return (\n    <ul className=\"MarketsList\">\n      {markets.map(market => (\n        <Market\n          key={market.id}\n          onRemove={() => removeMarket(market.id)}\n          {...market}\n        />\n      ))}\n      {online ? (\n        <li className=\"NewMarketPlaceholder\" onClick={browseAvailableMarkets}>\n          <span className=\"AddMarketButton\"> &#43; </span>\n          <p>Click to add a new market</p>\n        </li>\n      ) : (\n        <li className=\"ConnectingPlaceholder\">Connecting to server...</li>\n      )}\n    </ul>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport Modal from \"react-modal\";\nimport { parseBlob } from \"./util/fileReader\";\nimport MarketsList from \"./components/MarketsList\";\nimport \"./App.css\";\n\nconst STATUS = {\n  INITIALIZING: \"INITIALIZING\",\n  CONNECTED: \"CONNECTED\",\n  RECONNECTING: \"RECONNECTING\"\n};\nconst WS_URL = \"ws://localhost:9000\";\n\nconst ws = new WebSocket(WS_URL);\nModal.setAppElement(\"#root\");\n\nfunction App() {\n  const [status, setStatus] = useState(STATUS.INITIALIZING);\n  const [modalIsOpen, setIsOpen] = React.useState(false);\n  const [exchanges, setExchanges] = useState([]);\n  const [subscriptions, setSubscriptions] = useState({});\n\n  const closeModal = () => setIsOpen(false);\n  const openModal = () => setIsOpen(true);\n  const onAddSubscription = (marketId, market) => {\n    const { exchangeId, pair } = market;\n    const subscription = {\n      ...market,\n      asks: [],\n      bids: [],\n      speed: null\n    };\n    setSubscriptions({ ...subscriptions, [marketId]: subscription });\n    closeModal();\n    ws.send(\n      JSON.stringify({\n        action: \"subscribe\",\n        exchangeId,\n        pair\n      })\n    );\n  };\n  const onRemoveSubscription = marketId => {\n    const {\n      [marketId]: marketToRemove,\n      ...updatedSubscriptions\n    } = subscriptions;\n    const { exchangeId, pair } = marketToRemove;\n    ws.send(\n      JSON.stringify({\n        action: \"unsubscribe\",\n        exchangeId,\n        pair\n      })\n    );\n    setSubscriptions(updatedSubscriptions);\n  };\n\n  const availableMarkets = exchanges.reduce((markets, exchange) => {\n    const { id: exchangeId, name: exchangeName, pairs } = exchange;\n    return {\n      ...markets,\n      ...pairs\n        .filter(pair => !subscriptions.hasOwnProperty(`${exchangeId}.${pair}`))\n        .map(pair => ({\n          id: `${exchangeId}.${pair}`,\n          exchangeId,\n          exchangeName,\n          pair\n        }))\n        .reduce(\n          (pairs, market) => ({\n            ...pairs,\n            [market.id]: market\n          }),\n          {}\n        )\n    };\n  }, {});\n\n  useEffect(() => {\n    ws.onopen = () => {\n      setStatus(STATUS.CONNECTED);\n    };\n    ws.onmessage = async evt => {\n      let data;\n      try {\n        if (evt.data instanceof Blob) {\n          data = await parseBlob(evt.data);\n        } else {\n          data = JSON.parse(evt.data);\n        }\n      } catch (err) {\n        console.error(\"failed parsing message: \", evt.data);\n      }\n      if (data?.exchanges) {\n        setExchanges(data.exchanges);\n      }\n      if (data?.exchange && data?.pair) {\n        const { exchange, pair, asks, bids, speed } = data;\n        const subscriptionId = `${exchange}.${pair}`;\n        if (!subscriptions.hasOwnProperty(subscriptionId)) {\n          console.error(\n            `Got message for unknown subscription: exchangeId=${exchange} pair=${pair}`\n          );\n          return;\n        }\n        const subscription = subscriptions[subscriptionId];\n        if (asks || bids || speed) {\n          const updatedSubscription = {\n            ...subscription,\n            ...(asks && { asks }),\n            ...(bids && { bids }),\n            ...(speed !== undefined && { speed })\n          };\n          setSubscriptions({\n            ...subscriptions,\n            [subscriptionId]: updatedSubscription\n          });\n        }\n      }\n    };\n    ws.onclose = () => {\n      setStatus(STATUS.RECONNECTING);\n      console.error(\"ws closed\");\n    };\n    ws.onerror = () => console.error(\"ws error\");\n  }, [subscriptions]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"StatusBar\">\n        Status:\n        <span\n          className={`status ${\n            status === STATUS.RECONNECTING ? \"status-error\" : \"status-ok\"\n          }`}\n        >\n          {status}\n        </span>\n      </div>\n      <header className=\"App-header\">\n        <h1>Orderbooks</h1>\n      </header>\n      {status === STATUS.INITIALIZING ? (\n        <p>Connecting to server...</p>\n      ) : (\n        <MarketsList\n          exchanges={exchanges}\n          online={status === STATUS.CONNECTED}\n          markets={Object.values(subscriptions)}\n          browseAvailableMarkets={openModal}\n          removeMarket={onRemoveSubscription}\n        />\n      )}\n      <Modal\n        className=\"AddMarketModal\"\n        isOpen={modalIsOpen}\n        onRequestClose={closeModal}\n        contentLabel=\"Add market\"\n      >\n        <h2>Add market</h2>\n        <p>\n          Select which market you want to track (available:{\" \"}\n          {Object.keys(availableMarkets).length})\n        </p>\n        <ul className=\"AddMarketsList\">\n          {Object.entries(availableMarkets).map(([marketId, market]) => {\n            const { exchangeName, pair } = market;\n            return (\n              <li\n                className=\"AddMarketsListItem\"\n                key={marketId}\n                onClick={() => onAddSubscription(marketId, market)}\n              >\n                &#43; {exchangeName}: {pair}\n              </li>\n            );\n          })}\n        </ul>\n        <div>\n          <button className=\"button-cancel\" onClick={closeModal}>\n            Cancel\n          </button>\n        </div>\n      </Modal>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}