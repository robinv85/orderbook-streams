{"version":3,"sources":["util/fileReader.js","components/Market.js","components/MarketsList.js","App.js","serviceWorker.js","index.js"],"names":["parseBlob","blob","Promise","resolve","reader","FileReader","onload","JSON","parse","result","readAsText","Market","props","asks","bids","exchangeName","pair","midPrice","spread","onRemove","className","map","ask","key","bid","onClick","MarketsList","browseAvailableMarkets","markets","online","removeMarket","market","id","STATUS","ws","WebSocket","Modal","setAppElement","App","useState","status","setStatus","React","modalIsOpen","setIsOpen","exchanges","setExchanges","subscriptions","setSubscriptions","closeModal","availableMarkets","reduce","exchange","exchangeId","name","pairs","filter","hasOwnProperty","useEffect","onopen","onmessage","evt","a","data","Blob","console","error","log","stringify","snapshot","subscriptionId","subscription","updateSubscription","reverse","bestAskPrice","bestBidPrice","onclose","onerror","Object","values","marketId","marketToRemove","updatedSubscriptions","send","action","isOpen","onRequestClose","contentLabel","keys","length","entries","onAddSubscription","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.9286461d.chunk.js","sourcesContent":["export function parseBlob(blob) {\n  return new Promise(resolve => {\n    const reader = new FileReader();\n    reader.onload = () => {\n      resolve(JSON.parse(reader.result));\n    };\n    reader.readAsText(blob);\n  });\n}\n","import React from \"react\";\n\nexport default function Market(props) {\n  const {\n    asks = [],\n    bids = [],\n    exchangeName,\n    pair,\n    midPrice,\n    spread,\n    onRemove\n  } = props;\n  return (\n    <li className=\"Market\">\n      <header className=\"Market-header\">\n        <h3>\n          {exchangeName} {pair}\n        </h3>\n        <p>Speed: 53 ob/min</p>\n      </header>\n      <ul className=\"AsksList\">\n        {asks.map(ask => {\n          return (\n            <li key={ask[0] + ask[1]} className=\"Ask\">\n              <span className=\"AskPrice\">{ask[0]}</span>\n              <span className=\"\">{ask[1]}</span>\n            </li>\n          );\n        })}\n      </ul>\n      <div className=\"Market-highlight\">\n        <div className=\"MidPrice\">{midPrice && `${midPrice} USD`}</div>\n        <div className=\"Spread\">{spread && `${spread} %`}</div>\n      </div>\n      <ul className=\"BidsList\">\n        {bids.map(bid => {\n          return (\n            <li key={bid[0] + bid[1]} className=\"Bid\">\n              <span className=\"BidPrice\">{bid[0]}</span>\n              <span className=\"\">{bid[1]}</span>\n            </li>\n          );\n        })}\n      </ul>\n      <p className=\"RemoveMarket\" onClick={onRemove}>\n        <span className=\"RemoveMarketButton\"> &#10006; </span>\n        <span className=\"RemoveMarketText\">Click to remove market</span>\n      </p>\n    </li>\n  );\n}\n","import React from \"react\";\nimport Market from \"./Market\";\n\nexport default function MarketsList(props) {\n  const { browseAvailableMarkets, markets, online, removeMarket } = props;\n  return (\n    <ul className=\"MarketsList\">\n      {markets.map(market => (\n        <Market\n          key={market.id}\n          onRemove={() => removeMarket(market.id)}\n          {...market}\n        />\n      ))}\n      {online ? (\n        <li className=\"NewMarketPlaceholder\" onClick={browseAvailableMarkets}>\n          <span className=\"AddMarketButton\"> &#43; </span>\n          <p>Click to add a new market</p>\n        </li>\n      ) : (\n        <li className=\"ConnectingPlaceholder\">Connecting to server...</li>\n      )}\n    </ul>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport Modal from \"react-modal\";\nimport { parseBlob } from \"./util/fileReader\";\nimport MarketsList from \"./components/MarketsList\";\nimport \"./App.css\";\n\nconst STATUS = {\n  INITIALIZING: \"INITIALIZING\",\n  CONNECTED: \"CONNECTED\",\n  RECONNECTING: \"RECONNECTING\"\n};\nconst WS_URL = \"ws://localhost:9000\";\n\nconst ws = new WebSocket(WS_URL);\nModal.setAppElement(\"#root\");\n\nfunction App() {\n  const [status, setStatus] = useState(STATUS.INITIALIZING);\n  const [modalIsOpen, setIsOpen] = React.useState(false);\n  const [exchanges, setExchanges] = useState([]);\n  const [subscriptions, setSubscriptions] = useState({});\n\n  const closeModal = () => setIsOpen(false);\n  const openModal = () => setIsOpen(true);\n  const onAddSubscription = (marketId, market) => {\n    const { exchangeId, pair } = market;\n    const subscription = {\n      ...market,\n      asks: [],\n      bids: [],\n      midPrice: null,\n      spread: null\n    };\n    setSubscriptions({ ...subscriptions, [marketId]: subscription });\n    closeModal();\n    ws.send(\n      JSON.stringify({\n        action: \"subscribe\",\n        exchangeId,\n        pair\n      })\n    );\n  };\n  const onRemoveSubscription = marketId => {\n    const {\n      [marketId]: marketToRemove,\n      ...updatedSubscriptions\n    } = subscriptions;\n    const { exchangeId, pair } = marketToRemove;\n    ws.send(\n      JSON.stringify({\n        action: \"unsubscribe\",\n        exchangeId,\n        pair\n      })\n    );\n    setSubscriptions(updatedSubscriptions);\n  };\n\n  const availableMarkets = exchanges.reduce((markets, exchange) => {\n    const { id: exchangeId, name: exchangeName, pairs } = exchange;\n    return {\n      ...markets,\n      ...pairs\n        .filter(pair => !subscriptions.hasOwnProperty(`${exchangeId}.${pair}`))\n        .map(pair => ({\n          id: `${exchangeId}.${pair}`,\n          exchangeId,\n          exchangeName,\n          pair\n        }))\n        .reduce(\n          (pairs, market) => ({\n            ...pairs,\n            [market.id]: market\n          }),\n          {}\n        )\n    };\n  }, {});\n\n  useEffect(() => {\n    ws.onopen = () => {\n      setStatus(STATUS.CONNECTED);\n    };\n    ws.onmessage = async evt => {\n      let data;\n      try {\n        if (evt.data instanceof Blob) {\n          data = await parseBlob(evt.data);\n        } else {\n          data = JSON.parse(evt.data);\n        }\n      } catch (err) {\n        console.error(\"failed parsing message: \", evt.data);\n      }\n      console.log(\"message:\", JSON.stringify(data));\n      if (data?.exchanges) {\n        setExchanges(data.exchanges);\n      }\n      if (data?.exchange && data?.pair) {\n        const { exchange, pair, snapshot } = data;\n        const subscriptionId = `${exchange}.${pair}`;\n        if (!subscriptions.hasOwnProperty(subscriptionId)) {\n          console.error(\n            `Got message for unknown subscription: exchangeId=${exchange} pair=${pair}`\n          );\n          return;\n        }\n        const subscription = subscriptions[subscriptionId];\n        let updateSubscription;\n\n        if (snapshot) {\n          const { asks, bids } = snapshot;\n          updateSubscription = {\n            ...subscription,\n            asks: asks.reverse(),\n            bids\n          };\n        }\n\n        if (updateSubscription) {\n          const bestAskPrice = updateSubscription.asks[2][0];\n          const bestBidPrice = updateSubscription.bids[0][0];\n          const midPrice = (bestAskPrice + bestBidPrice) / 2;\n          const spread = (bestAskPrice - bestBidPrice) / midPrice;\n          console.log({\n            updateSubscription,\n            subscriptionId,\n            midPrice,\n            spread\n          });\n          setSubscriptions({\n            ...subscriptions,\n            [subscriptionId]: {\n              ...updateSubscription,\n              midPrice,\n              spread\n            }\n          });\n        }\n      }\n    };\n    ws.onclose = () => {\n      setStatus(STATUS.RECONNECTING);\n      console.error(\"ws closed\");\n    };\n    ws.onerror = () => console.error(\"ws error\");\n  }, [subscriptions]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"StatusBar\">\n        Status:\n        <span\n          className={`status ${\n            status === STATUS.RECONNECTING ? \"status-error\" : \"status-ok\"\n          }`}\n        >\n          {status}\n        </span>\n      </div>\n      <header className=\"App-header\">\n        <h1>Orderbooks</h1>\n      </header>\n      {status === STATUS.INITIALIZING ? (\n        <p>Connecting to server...</p>\n      ) : (\n        <MarketsList\n          exchanges={exchanges}\n          online={status === STATUS.CONNECTED}\n          markets={Object.values(subscriptions)}\n          browseAvailableMarkets={openModal}\n          removeMarket={onRemoveSubscription}\n        />\n      )}\n      <Modal\n        className=\"AddMarketModal\"\n        isOpen={modalIsOpen}\n        onRequestClose={closeModal}\n        contentLabel=\"Add market\"\n      >\n        <h2>Add market</h2>\n        <p>\n          Select which market you want to track (available:{\" \"}\n          {Object.keys(availableMarkets).length})\n        </p>\n        <ul className=\"AddMarketsList\">\n          {Object.entries(availableMarkets).map(([marketId, market]) => {\n            const { exchangeName, pair } = market;\n            return (\n              <li\n                className=\"AddMarketsListItem\"\n                key={marketId}\n                onClick={() => onAddSubscription(marketId, market)}\n              >\n                &#43; {exchangeName}: {pair}\n              </li>\n            );\n          })}\n        </ul>\n        <div>\n          <button className=\"button-cancel\" onClick={closeModal}>\n            Cancel\n          </button>\n        </div>\n      </Modal>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}